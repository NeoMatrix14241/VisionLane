name: Pylint

on: [push, pull_request]

jobs:
  pylint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-dev libglib2.0-0 libxext6 libxrender-dev libgomp1
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint
        # Install project dependencies with fallback options
        pip install numpy torch torchvision opencv-python-headless Pillow psutil pynvml gputil
        # Install PyQt6 and python-doctr separately (may have platform issues)
        pip install PyQt6 || echo "PyQt6 installation failed, continuing without GUI support"
        pip install python-doctr || echo "python-doctr installation failed, continuing without doctr"
        # Install additional dependencies if requirements.txt exists, excluding Windows-specific packages
        if [ -f requirements.txt ]; then 
          # Filter out Windows-specific packages that won't install on Linux
          grep -v "python-magic-bin" requirements.txt | grep -v "pywin32" | pip install -r /dev/stdin || echo "Some packages failed to install, continuing..."
        fi
    
    - name: Setup pylint config
      run: |
        if [ -f sample_lint.txt ]; then 
          # Fix regex patterns in the config file
          sed 's/\*_test\\.py\$/.*_test\\.py\$/' sample_lint.txt > .pylintrc
          sed -i 's/test_\*\\.py\$/test_.*\\.py\$/' .pylintrc
          echo "Using fixed custom pylint configuration"
        else
          echo "Using default pylint configuration"
        fi
    
    - name: Analysing the code with pylint
      run: |
        echo "Running pylint to check code quality, style, and potential bugs..."
        pylint $(git ls-files '*.py') --output-format=text --reports=yes --score=yes
        echo "Pylint analysis completed. Check the logs above for any issues found."
